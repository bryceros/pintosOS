			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

bryce roski amendola <bryceros@usc.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Pintos guide, Brandon, Ryutov, Chris
			     ALARM CLOCK
			     ===========


---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

IN time.cpp
	struct list timer_waiter; =>  this is a list of threads that have been put to sleep

IN thread.h 
	In struct thread 
	    int64_t sleeptick;  =>   the time when it can wake up


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

IN time_sleep
	1. disables interrupt to stop thread from switching
	2. set current thread sleeptick variable to the time it will wakeup at
	3. insert the current thread in the timer_waiter list 
	4. call thread_block so no longer running
	5. enable interrupt   
IN time_interrupt
	1. go through timer_waiter list and check if thread can be waking up awake
	2. if so pop it from the list and unblock it so it can run again

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
sort the timer_waiter list by smallest sleep value so when going through list in timer_interrupt wont check other threads if one that should wake up first still asleep 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	I prevented multiple threads from running simultaneously by disableing interrupts. Disableing interrupts stops schedules from running and thus no thread switching.   
>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
	disables interrupt
---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
 	1. timer_waiter is similiar to sema->waiting list
 	2. sorting timer_waiter saves wasted iteration in timer_interrupt
 	3. every thread has there own time they need to sleep to so they need a variable (sleeptick).  

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In lock.h
	struct thread *holder; => this is the thread that holds the lock. Now does than just debuging 
	struct list_elem lockelem; =>  list of locks for thread that owns the lock
In thread.h
	int donatepriority; => a priority that is the max of others thread who are waiting on this donated priority. Should be no less than this thread priority.
    	struct lock* lock_wait;	=> the lock this thread is waiting on. 
    	struct list locks; => list of all locks thread owns. 

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)
			thread_Low: priority low, hold Lock_A <- // thread_Low should have the donatepriorty of thread_High 
							^
							|
			thread_Med: priority medium, hold Lock_B, waiting on Lock_A // thread_Med should have the donatepriorty of thread_High 
							^
							|
			thread_High: priority high, waiting on Lock_B  
---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
  	1. I get the max donatepriorty thread from sema->waiters list
	2. remove it from sema->waiters
	3. unblock it
	4. at the end of sema_up call thread_yield so it can call schedule and run the highest priority thread 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
	1.	1. disable interrupt
		2. check if lock has a holder :: if does update holder's donatepriorty and update thread holder is waiting on if so
		3. call sema_down (no change here)
		4. then once able to run becomes lock owner (no change here) && adds lock to threads list of locks it owns
		5. update this thread's donatedpriority now with all threads waiting on this lock
		6. enable interrupt

	2. 	1. nested donation are handled by the function void thread_update_lock_wait_priority(struct thread *); 
		2. this function check if thread is waiting on a lock :: if so update that lock holder's donatepriorty && then recursively call this function now with lock holder to see if it waiting on a lock  

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
1. disable interrupt
2. remove lock from the thread's list
3. update donatepriority now without lock
4. make lock->holder not equal to this thread (no change here)
5. enable interrupt
6. call sema_up // this function has been modified pop the thread with the highest donatepriority and calls thread_yield to allow this thread to run if it has highest donatepriority
  
---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
	1. if schedule is called before current thread update it's priority to a higher priority it may get switchout by a thread      
	2. disables interrupt stop thread from swicthing
	3. NO because a thread can called schedule in another functions  
---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
	make sense to put donatepriority in thread struct instead of lock because thread_get_priority would be 0(1) instead of O(n) n = # of lock thread has.
	this is called more than lock_aquired / lock_release which has to update donatepriority with all thread waiting on it.  

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
